diff -up paramiko-1.7.5/tests/test_transport.py.orig paramiko-1.7.5/tests/test_transport.py
--- paramiko-1.7.5/tests/test_transport.py.orig	2009-07-20 04:37:32.000000000 +0200
+++ paramiko-1.7.5/tests/test_transport.py	2018-04-04 11:13:48.270717215 +0200
@@ -30,7 +30,7 @@ import unittest
 import random
 
 from paramiko import Transport, SecurityOptions, ServerInterface, RSAKey, DSSKey, \
-    SSHException, BadAuthenticationType, InteractiveQuery, ChannelException
+    SSHException, BadAuthenticationType, InteractiveQuery, ChannelException, Channel
 from paramiko import AUTH_FAILED, AUTH_PARTIALLY_SUCCESSFUL, AUTH_SUCCESSFUL
 from paramiko import OPEN_SUCCEEDED, OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED
 from paramiko.common import MSG_KEXINIT, MSG_CHANNEL_WINDOW_ADJUST
@@ -81,8 +81,12 @@ class NullServer (ServerInterface):
     
     def check_global_request(self, kind, msg):
         self._global_request = kind
-        return False
-    
+        # NOTE: for w/e reason, older impl of this returned False always, even
+        # tho that's only supposed to occur if the request cannot be served.
+        # For now, leaving that the default unless test supplies specific
+        # 'acceptable' request kind
+        return kind == 'acceptable'
+
     def check_channel_x11_request(self, channel, single_connection, auth_protocol, auth_cookie, screen_number):
         self._x11_single_connection = single_connection
         self._x11_auth_protocol = auth_protocol
@@ -127,7 +127,9 @@ class TransportTest (unittest.TestCase):
         self.socks.close()
         self.sockc.close()
 
-    def setup_test_server(self, client_options=None, server_options=None):
+    def setup_test_server(
+        self, client_options=None, server_options=None, connect_kwargs=None,
+    ):
         host_key = RSAKey.from_private_key_file('tests/test_rsa.key')
         public_host_key = RSAKey(data=str(host_key))
         self.ts.add_server_key(host_key)
@@ -141,8 +143,13 @@ class TransportTest (unittest.TestCase):
         self.server = NullServer()
         self.assert_(not event.isSet())
         self.ts.start_server(event, self.server)
-        self.tc.connect(hostkey=public_host_key,
-                        username='slowdive', password='pygmalion')
+        if connect_kwargs is None:
+            connect_kwargs = dict(
+                hostkey=public_host_key,
+                username='slowdive',
+                password='pygmalion',
+            )
+        self.tc.connect(**connect_kwargs)
         event.wait(1.0)
         self.assert_(event.isSet())
         self.assert_(self.ts.is_active())
@@ -755,3 +759,37 @@ class TransportTest (unittest.TestCase):
         # Close the channels
         schan.close()
         chan.close()
+
+    def test_server_rejects_open_channel_without_auth(self):
+        try:
+            self.setup_test_server(connect_kwargs={})
+            self.tc.open_session()
+        except ChannelException as e:
+            assert e.code == OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED
+        else:
+            assert False, "Did not raise ChannelException!"
+
+    def test_server_rejects_arbitrary_global_request_without_auth(self):
+        self.setup_test_server(connect_kwargs={})
+        # NOTE: this dummy global request kind would normally pass muster
+        # from the test server.
+        self.tc.global_request('acceptable')
+        # Global requests never raise exceptions, even on failure (not sure why
+        # this was the original design...ugh.) Best we can do to tell failure
+        # happened is that the client transport's global_response was set back
+        # to None; if it had succeeded, it would be the response Message.
+        err = "Unauthed global response incorrectly succeeded!"
+        assert self.tc.global_response is None, err
+
+    def test_server_rejects_port_forward_without_auth(self):
+        # NOTE: at protocol level port forward requests are treated same as a
+        # regular global request, but Paramiko server implements a special-case
+        # method for it, so it gets its own test. (plus, THAT actually raises
+        # an exception on the client side, unlike the general case...)
+        self.setup_test_server(connect_kwargs={})
+        try:
+            self.tc.request_port_forward('localhost', 1234)
+        except SSHException as e:
+            assert "forwarding request denied" in str(e)
+        else:
+            assert False, "Did not raise SSHException!"
